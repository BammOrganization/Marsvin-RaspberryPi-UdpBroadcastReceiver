//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RaspberryPi_UdpBroadcastReceiver.LightTempServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LightTemp", Namespace="http://schemas.datacontract.org/2004/07/RaspberryPi_soap")]
    [System.SerializableAttribute()]
    public partial class LightTemp : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LightField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TempField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimestampField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Light {
            get {
                return this.LightField;
            }
            set {
                if ((this.LightField.Equals(value) != true)) {
                    this.LightField = value;
                    this.RaisePropertyChanged("Light");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Temp {
            get {
                return this.TempField;
            }
            set {
                if ((this.TempField.Equals(value) != true)) {
                    this.TempField = value;
                    this.RaisePropertyChanged("Temp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LightTempServiceReference.ILightTempService")]
    public interface ILightTempService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILightTempService/AddLightTempData", ReplyAction="http://tempuri.org/ILightTempService/AddLightTempDataResponse")]
        void AddLightTempData(int light, int temp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILightTempService/AddLightTempData", ReplyAction="http://tempuri.org/ILightTempService/AddLightTempDataResponse")]
        System.Threading.Tasks.Task AddLightTempDataAsync(int light, int temp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILightTempService/GetAllLightTemp", ReplyAction="http://tempuri.org/ILightTempService/GetAllLightTempResponse")]
        RaspberryPi_UdpBroadcastReceiver.LightTempServiceReference.LightTemp[] GetAllLightTemp();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILightTempService/GetAllLightTemp", ReplyAction="http://tempuri.org/ILightTempService/GetAllLightTempResponse")]
        System.Threading.Tasks.Task<RaspberryPi_UdpBroadcastReceiver.LightTempServiceReference.LightTemp[]> GetAllLightTempAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILightTempServiceChannel : RaspberryPi_UdpBroadcastReceiver.LightTempServiceReference.ILightTempService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LightTempServiceClient : System.ServiceModel.ClientBase<RaspberryPi_UdpBroadcastReceiver.LightTempServiceReference.ILightTempService>, RaspberryPi_UdpBroadcastReceiver.LightTempServiceReference.ILightTempService {
        
        public LightTempServiceClient() {
        }
        
        public LightTempServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LightTempServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LightTempServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LightTempServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddLightTempData(int light, int temp) {
            base.Channel.AddLightTempData(light, temp);
        }
        
        public System.Threading.Tasks.Task AddLightTempDataAsync(int light, int temp) {
            return base.Channel.AddLightTempDataAsync(light, temp);
        }
        
        public RaspberryPi_UdpBroadcastReceiver.LightTempServiceReference.LightTemp[] GetAllLightTemp() {
            return base.Channel.GetAllLightTemp();
        }
        
        public System.Threading.Tasks.Task<RaspberryPi_UdpBroadcastReceiver.LightTempServiceReference.LightTemp[]> GetAllLightTempAsync() {
            return base.Channel.GetAllLightTempAsync();
        }
    }
}
